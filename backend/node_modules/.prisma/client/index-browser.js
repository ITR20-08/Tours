
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.19.0
 * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
 */
Prisma.prismaVersion = {
  client: "2.19.0",
  engine: "c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.BenefitScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description'
});

exports.Prisma.LocationScalarFieldEnum = makeEnum({
  id: 'id',
  country: 'country',
  city: 'city'
});

exports.Prisma.PictureScalarFieldEnum = makeEnum({
  id: 'id',
  Tour: 'Tour',
  picture: 'picture'
});

exports.Prisma.ReservationScalarFieldEnum = makeEnum({
  id: 'id',
  Tour: 'Tour',
  quantity: 'quantity',
  User: 'User'
});

exports.Prisma.ReviewScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  calification: 'calification',
  Tour: 'Tour',
  User: 'User'
});

exports.Prisma.TourScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  duration: 'duration',
  start_date: 'start_date',
  price_for_person: 'price_for_person',
  max_capacity: 'max_capacity',
  calification: 'calification',
  Category: 'Category',
  Location: 'Location'
});

exports.Prisma.Tour_benefitScalarFieldEnum = makeEnum({
  Tour: 'Tour',
  Benefit: 'Benefit'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  name: 'name',
  last_name: 'last_name',
  email: 'email',
  country: 'country',
  birth_date: 'birth_date',
  password: 'password',
  type: 'type'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  benefit: 'benefit',
  category: 'category',
  location: 'location',
  picture: 'picture',
  reservation: 'reservation',
  review: 'review',
  tour: 'tour',
  tour_benefit: 'tour_benefit',
  user: 'user'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
